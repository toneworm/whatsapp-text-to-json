{"version":3,"file":"chat-to-messages.js","sources":["../src/chatToMessages.js","../src/scripts/chat-to-messages.js","../src/utils/info.js"],"sourcesContent":["const CURRENT_USER = 'You'\nconst LINE_DATE_END = 22\nconst LINE_TEXT_START = 23\n\nconst mediaLineRegEx = /(image|audio|video|GIF) omitted$/\n\nexport function convertToJSON(chatTextString, includeMediaLines, includeType) {\n  const chatTextArr = chatTextString.split('\\n')\n  const jsonData = []\n\n  for (let i = 0, len = chatTextArr.length; i < len; i ++) {\n    const line = cleanLine(chatTextArr[i])\n\n    // skip line if empty, media omitted message + flag or e2e encryption message\n    if (\n      !line.length\n      || (!includeMediaLines && mediaLineRegEx.test(line))\n      || (i === 0 && line.indexOf('Messages to this group are now secured with end-to-end encryption.') >= 0)\n    ) {\n      continue\n    }\n\n    const date = getDate(line.slice(0, LINE_DATE_END))\n\n    // if no date, treat as additional line\n    if (!date) {\n      jsonData[jsonData.length - 1].message += `\\n${line}`\n    } else {\n      const { user, messageType, message } = getMessageDetails(line.slice(LINE_TEXT_START))\n\n      jsonData.push({\n        date,\n        user,\n        message,\n        ...( includeType ? { type: messageType } : {})\n      })\n    }\n  }\n\n  return { data: jsonData }\n}\n\nfunction cleanLine(line) {\n  // strip chars: 8206 (ltr), 8236\n  const stripChars = [8206, 8236].map(code => String.fromCharCode(code))\n  return line.replace(new RegExp(`(${stripChars.join('|')})`, 'g'), '').trim()\n}\n\nfunction getDate(dateStr) {\n  if (dateStr[0] !== '[') {\n    return null\n  }\n\n  const RE_DATE = /(?<year>\\d{4})\\/(?<month>\\d{1,2})\\/(?<date>\\d{1,2}), (?<hour>\\d{2}):(?<min>\\d{2}):(?<sec>\\d{2})/;\n  const { groups: { year, month, date, hour, min, sec } } = RE_DATE.exec(dateStr);;\n\n  return new Date(year, month - 1, date, hour, min, sec).toISOString()\n}\n\nfunction getMessageDetails(messageStr) {\n\n  // encryption message\n  if (/Messages to this group are now secured with end-to-end encryption./.test(messageStr)) {\n    return {\n      user: null,\n      messageType: 'system',\n      message: 'Messages to this group are now secured with end-to-end encryption.'\n    }\n  }\n\n  // standard message\n  let userEndIndex = messageStr.indexOf(':')\n  \n  if (userEndIndex >= 0) {\n    const user = messageStr.slice(0, userEndIndex)\n    return {\n      user,\n      message: getUserMessage(messageStr, user),\n      messageType: 'message'\n    }\n  }\n\n  // system message\n  userEndIndex = messageStr.search(/\\s(left)/)\n  \n  if (userEndIndex >= 0) {\n    return {\n      user: null,\n      message: messageStr,\n      messageType: 'system'\n    }\n  }\n\n  // action message\n  userEndIndex = messageStr.search(/created|added|changed|joined|left|removed|group/)\n\n  if (userEndIndex >= 0) {\n    const userStr = messageStr.slice(0, userEndIndex)\n    // TODO: current user to be configurable\n    return {\n      user: userStr === 'You' ? CURRENT_USER : userStr,\n      message: messageStr,\n      messageType: 'action'\n    }\n  }\n\n  // unhandled message type\n  return {\n    user: null,\n    message: messageStr,\n    messageType: null,\n  }\n}\n\nfunction getUserMessage(messageStr, user = '') {\n  return messageStr.slice(user.length + 2)\n}","import { convertToJSON } from '../chatToMessages'\nimport { info } from '../utils/info'\nimport { writeFile, readFileSync } from 'fs'\n\nconst fileName = process.argv[2]\nconst flags = process.argv.slice(2)\nconst includeMediaLines = flags.includes('-m')\nconst includeType = flags.includes('-t')\n\n// default: hide the omitted media lines, don't show the type\n\nif (!fileName) {\n  throw Error('No filename provided.')\n}\n\nlet json\nlet jsonUrl = `${fileName.slice(0, -4)}-messages.json`\n\ntry {\n  const file = readFileSync(fileName, 'utf8')\n  json = convertToJSON(file, includeMediaLines, includeType)\n} catch (err) {\n  throw Error('Error loading file. Make sure the filename is correct and target file exists.')\n}\n\nif (!json) {\n  throw Error('No data returned.')\n}\n\nwriteFile(jsonUrl, JSON.stringify(json), (err) => {\n  if (err) {\n    throw err\n  }\n  \n  info(`written to ${jsonUrl}`)\n})\n","export function info(message, noEllipsis) {\n  console.log(`${message}${noEllipsis ? '' : '...'}`)\n}\n\nexport const timer = {\n  startTimer() {\n    startTime = Date.now()\n  },\n  getTime() {\n    return `Time taken: ${Date.now() - startTime}`\n  }\n}"],"names":["mediaLineRegEx","cleanLine","line","stripChars","map","code","String","fromCharCode","replace","RegExp","join","trim","getDate","dateStr","groups","year","month","date","hour","min","sec","exec","Date","toISOString","getMessageDetails","messageStr","test","user","messageType","message","userEndIndex","indexOf","slice","getUserMessage","search","userStr","length","fileName","process","argv","flags","includeMediaLines","includes","includeType","Error","json","jsonUrl","chatTextString","chatTextArr","split","jsonData","i","len","push","type","data","convertToJSON","readFileSync","err","writeFile","JSON","stringify","console","log"],"mappings":"oBAAA,MAIMA,EAAiB,mCAsCvB,SAASC,EAAUC,GAEjB,MAAMC,EAAa,CAAC,KAAM,MAAMC,IAAIC,GAAQC,OAAOC,aAAaF,IAChE,OAAOH,EAAKM,QAAQ,IAAIC,OAAQ,IAAGN,EAAWO,KAAK,QAAS,KAAM,IAAIC,OAGxE,SAASC,EAAQC,GACf,GAAmB,MAAfA,EAAQ,GACV,YAGF,MACQC,QAAQC,KAAEA,EAAFC,MAAQA,EAARC,KAAeA,EAAfC,KAAqBA,EAArBC,IAA2BA,EAA3BC,IAAgCA,IADhC,kGACkDC,KAAKR,GAEvE,WAAWS,KAAKP,EAAMC,EAAQ,EAAGC,EAAMC,EAAMC,EAAKC,GAAKG,cAGzD,SAASC,EAAkBC,GAGzB,GAAI,qEAAqEC,KAAKD,GAC5E,MAAO,CACLE,KAAM,KACNC,YAAa,SACbC,QAAS,sEAKb,IAAIC,EAAeL,EAAWM,QAAQ,KAEtC,GAAID,GAAgB,EAAG,CACrB,MAAMH,EAAOF,EAAWO,MAAM,EAAGF,GACjC,MAAO,CACLH,KAAAA,EACAE,QAASI,EAAeR,EAAYE,GACpCC,YAAa,WAOjB,GAFAE,EAAeL,EAAWS,OAAO,YAE7BJ,GAAgB,EAClB,MAAO,CACLH,KAAM,KACNE,QAASJ,EACTG,YAAa,UAOjB,GAFAE,EAAeL,EAAWS,OAAO,mDAE7BJ,GAAgB,EAAG,CACrB,MAAMK,EAAUV,EAAWO,MAAM,EAAGF,GAEpC,MAAO,CACLH,KAAkB,QAAZQ,EApGS,MAoG0BA,EACzCN,QAASJ,EACTG,YAAa,UAKjB,MAAO,CACLD,KAAM,KACNE,QAASJ,EACTG,YAAa,MAIjB,SAASK,EAAeR,EAAYE,EAAO,IACzC,OAAOF,EAAWO,MAAML,EAAKS,OAAS,GC/GxC,MAAMC,EAAWC,QAAQC,KAAK,GACxBC,EAAQF,QAAQC,KAAKP,MAAM,GAC3BS,EAAoBD,EAAME,SAAS,MACnCC,EAAcH,EAAME,SAAS,MAInC,IAAKL,EACH,MAAMO,MAAM,yBAGd,IAAIC,EACAC,EAAaT,EAASL,MAAM,GAAI,GAArB,iBAEf,IAEEa,WDd4BE,EAAgBN,EAAmBE,GAC/D,MAAMK,EAAcD,EAAeE,MAAM,MACnCC,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGC,EAAMJ,EAAYZ,OAAQe,EAAIC,EAAKD,IAAM,CACvD,MAAMjD,EAAOD,EAAU+C,EAAYG,IAGnC,IACGjD,EAAKkC,SACDK,GAAqBzC,EAAe0B,KAAKxB,IACpC,IAANiD,GAAWjD,EAAK6B,QAAQ,uEAAyE,EAErG,SAGF,MAAMd,EAAOL,EAAQV,EAAK8B,MAAM,EArBd,KAwBlB,GAAKf,EAEE,CACL,MAAMU,KAAEA,EAAFC,YAAQA,EAARC,QAAqBA,GAAYL,EAAkBtB,EAAK8B,MA1B5C,KA4BlBkB,EAASG,KAAK,CACZpC,KAAAA,EACAU,KAAAA,EACAE,QAAAA,KACKc,EAAc,CAAEW,KAAM1B,GAAgB,UAR7CsB,EAASA,EAASd,OAAS,GAAGP,SAAY,KAAI3B,EAalD,MAAO,CAAEqD,KAAML,GCnBRM,CADMC,eAAapB,EAAU,QACTI,EAAmBE,GAC9C,MAAOe,GACP,MAAMd,MAAM,iFAGd,IAAKC,EACH,MAAMD,MAAM,qBAGde,YAAUb,EAASc,KAAKC,UAAUhB,GAAQa,IACxC,GAAIA,EACF,MAAMA,EC9BRI,QAAQC,IDiCF,cAAajB,ECjCN"}